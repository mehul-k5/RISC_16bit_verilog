//0000
00
82 // ADD R2 R0 R0
//0002
00
88 // ADD R8 R0 R0
//0004
02
10// load R12 R8 02 - load from 4
//0006
03
14 // load R13 R8 03
//0008
14
A2 // ADDi2 R2 14
//000A
CD
81 // ADD R1 R12 R13
//000C
80
E1 // SUBi2 R1 80
//000E
10
42 // BEQ R2 R1 R0
//0010
12
01 // SRL R1 1
//0012
F8
3F // JUMP FF8
//0014
22
0D // SRL R13 2
//0016
08
A8 // ADDi2 R8 8
//0018
D8
52 // BNEQ R2 R13 R8
//001A
CD
F1 // OR R1 R12 R13
//001C
00
89 // ADD R9 R0 R0
//001E
04
A9 // ADDi2 R9 4
//0020
02
25 // Store R13 R9 2
//0022
10
8E // ADD R14 R1 R0
//0024
03
29 // Store R14 R9 3
//0026
00 
78 // NANDImm R8 00H //R8 becomes all 1 : 0111_1000_0000_0000 : 7800H //40sec
//0028
FF
78 // NANDImm R8 FFH //R8 becomes all 0 : 0111_1000_1111_1111 : 78FFH //40sec
//002A
AA
98 //ADDi1 R8 AA = R8 + (FF)AA = FFAA
//002C
AB
98 //ADDi1 R8 AB = R8+FFAB=FF55
//002E
00 
71 // NANDImm R1 00H //R1 becomes all 1 : 0111_0001_0000_0000 : 7100H //40sec
//0030
FF
71 // NANDImm R1 FFH //R1 becomes all 0 : 0111_0001_1111_1111 : 71FFH //40sec
//0032
FF
62 // ORImm R2 FFH //R2 becomes all 1 : 0111_0010_0000_0000 : 7200H //40sec
//0034
FF
72 // NANDImm R2 FFH //R2 becomes all 0 : 0111_0010_1111_1111 : 72FFH //40sec
//0036
64
A1 //addi2 R1 64 //R1 gets 0064
//0038
8C
A2 //addi2 R2 8c //R2 gets 008c
//003A
12
C3 //SUB Rd Rs1 Rs2 : 1100_0011_0001_0010 : C312H //0064-008c=FFD8--in Rd=R3
//003C
21
C3 //SUB Rd Rs1 Rs2 : 1100_0011_0001_0010 : C321H //-0064+008c=0028--in Rd=R3
//003E
8C
D1 //SUBImm1 Rd Imm : 1101_0001_1000_1100 : D18CH //0064-ff8c=00D8H--in Rd=R1
//0040
D8
D1 //SUBImm1 Rd Imm : 1101_0001_1101_1000 : D1D8H //00D8-FFD8=FF00H--in Rd=R1
//0042
27
E3 //SUBImm2 Rd Imm : 1110_0011_0010_0111 : E327H //0028-0027=0001H--in Rd=R3
//0044
81
02 //SLL Rd Imm : 0000_0010_1000_0001 : 0281H //008cH <<8 = 8c00H --in Rd=R2
//0046
81
01 //SLL Rd Imm : 0000_0001_1000_0001 : 0181H //FF00H <<8 = 0000H --in Rd=R1
//0048
83
02 //SAR Rd Imm : 0000_0010_1000_0011 : 0283H //8c00H>>>8 = FF8cH --in Rd=R2
//004A
83
03 //SAR Rd Imm : 0000_0011_1000_0011 : 0383H //0001H>>>8 = 0000H --in Rd=R3
//004C
21
B1 // Logcal NAND - R1 = R2 NAND R1 = FFFF
//004E
23
F2 // Logical OR - R2 = R2 OR R3 = FF8c
//0050
01 
30 //Jump to 0053 - illegal address, address_invalid = 1, user should stop the execution
